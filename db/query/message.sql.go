// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: message.sql

package query

import (
	"context"
	"database/sql"
)

const getMessages = `-- name: GetMessages :many
SELECT id, timestamp, role, content FROM message
`

func (q *Queries) GetMessages(ctx context.Context) ([]Message, error) {
	rows, err := q.db.QueryContext(ctx, getMessages)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.Timestamp,
			&i.Role,
			&i.Content,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertMessage = `-- name: InsertMessage :exec
INSERT INTO message (timestamp, role, content) 
VALUES (?,?,?)
`

type InsertMessageParams struct {
	Timestamp sql.NullString `json:"timestamp"`
	Role      sql.NullString `json:"role"`
	Content   sql.NullString `json:"content"`
}

func (q *Queries) InsertMessage(ctx context.Context, arg InsertMessageParams) error {
	_, err := q.db.ExecContext(ctx, insertMessage, arg.Timestamp, arg.Role, arg.Content)
	return err
}
