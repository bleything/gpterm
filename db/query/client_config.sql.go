// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: client_config.sql

package query

import (
	"context"
)

const cycleClientConfig = `-- name: CycleClientConfig :one
UPDATE config
SET value = (
    SELECT
        CASE
            -- Check if current value is less than the maximum value
            WHEN (SELECT value FROM config WHERE name = 'client-config') < (SELECT MAX(name) FROM client_config)
            THEN (
                -- If current value is less than the maximum value, select the next value
                SELECT MIN(name) FROM client_config
                WHERE name > (SELECT value FROM config WHERE name = 'client-config')
            )
            ELSE (
                -- If current value is equal to the maximum value, wrap around to the beginning
                SELECT MIN(name) FROM client_config
            )
        END
)
WHERE name = 'client-config'
RETURNING name, value
`

func (q *Queries) CycleClientConfig(ctx context.Context) (Config, error) {
	row := q.queryRow(ctx, q.cycleClientConfigStmt, cycleClientConfig)
	var i Config
	err := row.Scan(&i.Name, &i.Value)
	return i, err
}

const getClientConfig = `-- name: GetClientConfig :one
SELECT name, model, message_context FROM client_config
where name = (select value from config where name = 'client-config')
`

func (q *Queries) GetClientConfig(ctx context.Context) (ClientConfig, error) {
	row := q.queryRow(ctx, q.getClientConfigStmt, getClientConfig)
	var i ClientConfig
	err := row.Scan(&i.Name, &i.Model, &i.MessageContext)
	return i, err
}

const updateClientConfig = `-- name: UpdateClientConfig :one
update client_config
set message_context = ?
where name = (select value from config where name = 'client-config')
returning name, model, message_context
`

func (q *Queries) UpdateClientConfig(ctx context.Context, messageContext int64) (ClientConfig, error) {
	row := q.queryRow(ctx, q.updateClientConfigStmt, updateClientConfig, messageContext)
	var i ClientConfig
	err := row.Scan(&i.Name, &i.Model, &i.MessageContext)
	return i, err
}
