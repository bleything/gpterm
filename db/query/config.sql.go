// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: config.sql

package query

import (
	"context"
)

const getConfig = `-- name: GetConfig :many
SELECT name, value FROM config
`

func (q *Queries) GetConfig(ctx context.Context) ([]Config, error) {
	rows, err := q.query(ctx, q.getConfigStmt, getConfig)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Config
	for rows.Next() {
		var i Config
		if err := rows.Scan(&i.Name, &i.Value); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getConfigValue = `-- name: GetConfigValue :one
SELECT value FROM config
WHERE name=?
`

func (q *Queries) GetConfigValue(ctx context.Context, name string) (string, error) {
	row := q.queryRow(ctx, q.getConfigValueStmt, getConfigValue, name)
	var value string
	err := row.Scan(&value)
	return value, err
}

const setConfigValue = `-- name: SetConfigValue :exec
INSERT OR REPLACE INTO config (name, value) VALUES (?, ?)
`

type SetConfigValueParams struct {
	Name  string `json:"name"`
	Value string `json:"value"`
}

func (q *Queries) SetConfigValue(ctx context.Context, arg SetConfigValueParams) error {
	_, err := q.exec(ctx, q.setConfigValueStmt, setConfigValue, arg.Name, arg.Value)
	return err
}
