// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: usage.sql

package query

import (
	"context"
)

const getCompletionTokens = `-- name: GetCompletionTokens :one
SELECT total(completion_tokens) from usage
`

func (q *Queries) GetCompletionTokens(ctx context.Context) (float64, error) {
	row := q.queryRow(ctx, q.getCompletionTokensStmt, getCompletionTokens)
	var total float64
	err := row.Scan(&total)
	return total, err
}

const getPromptTokens = `-- name: GetPromptTokens :one
SELECT total(prompt_tokens) from usage
`

func (q *Queries) GetPromptTokens(ctx context.Context) (float64, error) {
	row := q.queryRow(ctx, q.getPromptTokensStmt, getPromptTokens)
	var total float64
	err := row.Scan(&total)
	return total, err
}

const getTotalTokens = `-- name: GetTotalTokens :one
SELECT total(total_tokens) from usage
`

func (q *Queries) GetTotalTokens(ctx context.Context) (float64, error) {
	row := q.queryRow(ctx, q.getTotalTokensStmt, getTotalTokens)
	var total float64
	err := row.Scan(&total)
	return total, err
}

const insertUsage = `-- name: InsertUsage :exec
INSERT INTO usage 
(prompt_tokens, completion_tokens, total_tokens)
VALUES
(?,?,?)
`

type InsertUsageParams struct {
	PromptTokens     int64 `json:"prompt_tokens"`
	CompletionTokens int64 `json:"completion_tokens"`
	TotalTokens      int64 `json:"total_tokens"`
}

func (q *Queries) InsertUsage(ctx context.Context, arg InsertUsageParams) error {
	_, err := q.exec(ctx, q.insertUsageStmt, insertUsage, arg.PromptTokens, arg.CompletionTokens, arg.TotalTokens)
	return err
}
